def static getHockeyAppId(def project, def brand) {
    
    final HOCKEYAPP_CARE_APP_ID_MAP = ['myelectrolux-sprint' : 'cf116a138086435dbc04f1678b50cc6d',
                                  'myelectrolux-staging' : '3e1788b2e0c64d47ad85e37cbfb40918',
                                  'myaeg-staging' : '8c16928284044b15a50916831d69d66e']

    final HOCKEYAPP_KITCHEN_APP_ID_MAP = ['taste-staging' : 'ffe463f1bf804d1c9ce09efbe75909b2']

    def HOCKEYAPP_APP_ID

    if (project == "care"){
        if (brand == "myelectrolux-staging"){
        HOCKEYAPP_APP_ID = HOCKEYAPP_CARE_APP_ID_MAP.get("myelectrolux-staging")}
        else if (brand == "myaeg-staging"){
            HOCKEYAPP_APP_ID = HOCKEYAPP_CARE_APP_ID_MAP.get("myaeg-staging")
        }
    }
    else if(project == "kitchen"){
        if (brand == "taste-staging"){
            HOCKEYAPP_APP_ID = HOCKEYAPP_KITCHEN_APP_ID_MAP.get("taste-staging")
        }
    }
//    def BUILD_LIST = [ 'bash', '-c', "curl -H 'X-HockeyAppToken:${ACCESS_TOKEN_HOCYEKAPP_API_ALL_APPS}' https://rink.hockeyapp.net/api/2/apps/${HOCKEYAPP_APP_ID}/app_versions.json | jq -r '.app_versions[:5][].shortversion'"]
//            .execute().text
//    def BUILD_LIST = sh (
//            script: "curl -H 'X-HockeyAppToken:${ACCESS_TOKEN_HOCYEKAPP_API_ALL_APPS}' https://rink.hockeyapp.net/api/2/apps/${HOCKEYAPP_APP_ID}/app_versions.json | jq -r '.app_versions[:5][].shortversion'",
//            returnStdout: true).trim()
    return HOCKEYAPP_APP_ID
}

pipeline {
    agent {
        label 'appium'
    }

    parameters {
        choice(name: 'PROJECT', choices: ['care', 'kitchen'], description: 'Choose Project type!')
        choice(name: 'BRAND', choices: ['myelectrolux-staging', 'myaeg-staging'], description: 'Choose Brand!')
        choice(name: 'TEST_SUITES', choices: ['careNavigationTests.xml', 'careSmokeTestsOutdoorWasher.xml'], description: 'Choose test suite!')


    }



    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
        timeout(time: 45, unit: 'MINUTES')
        timestamps()
        disableConcurrentBuilds()
    }



    stages {

        stage('Test pick build version number') {
            steps {

                def HOCKEYAPP_ID = getHockeyAppId("care", "myelectrolux-staging")
                def BUILD_LIST = sh (
            script: "curl -H 'X-HockeyAppToken:f670dc1b1b05467ea48647bef0d31016' https://rink.hockeyapp.net/api/2/apps/${HOCKEYAPP_ID}/app_versions.json | jq -r '.app_versions[:5][].shortversion'",
            returnStdout: true).trim()
                parameters: [choice(name: 'BUILD_VERSION', choices: ${BUILD_LIST}, description: 'Choose build version')]



                echo "${params.PROJECT}"

                echo "${params.BRAND}"

                echo "${params.TEST_SUITES}"

                echo "${params.BUILD_LIST}"
            }
        }

        /*stage('Check out') {
            steps {
                checkout scm
                sh 'git submodule update --init --recursive'
                sh '''
                    cd ./core-mobile-automation-framework
                    mvn clean install
                    '''
            }
        }

        stage('Run Automated EMEA Care Navigation tests') {
            steps {
                 sh 'mvn clean test -DtestFile="${TestSuites}" -DappUnderTest="${Project}" -DrealTestDevice=Pixel -DloginUser=automation -DapkEnvironment="${Brand}" -f pom.xml'
            }
        }*/
    }

    post {
        always {
            deleteDir()
        }

        success {
            echo 'Succes....'
        }

        failure {
            echo 'Failure....'
        }
    }
}